#!/bin/bash

# SETTINGS

FILE_EXTENSION="mp4"
VIDEO_CODEX="libx264"
AUDIO_CODEX="copy"

VERY_SMALL_RATIO=10 #output file is way too small (percentage)
SMALL_RATIO=50 #output file looks to small (percentage)
#LARGE_RATIO=100 #output file looks to big (percentage)

AV_CONV_COMMAND="ffmpeg"
THREADS="-threads 4"
BACKUP_DIR="./mp4vert-backup"
LOG_FILE="/tmp/mp4vert.log"
################################################################################
## NOTES ##

# Good formats:
#Video: h264
#Video: mpeg4
#Audio: aac
#Audio: mp3

# Okay formats:
#Video: mjpeg

# Unacceptable
#Video: msmpeg4
#Video: wmv3

#other AUDIO (havent been checked)
#Audio: ac3
#Audio: dca
#Audio: pcm_s16le
#Audio: wmav2

#TODO: capture ctrl+C in child, treat as conversion failure, remove, then terminate
################################################################################
# HELPER FUNCTIONS
function printHelp() {
	echo "mp4vert, a program for converting any video file to an mp4"
	echo -e "Usage: \t$0 INPUT [options]"
	echo -e "\t--full\tConvert codex and container"
	echo -e "\t--copy\tCopy codex to new container"
	echo -e "\t--smart\tCopies good codecs or converts bad ones (default)"
	echo -e ""
	echo -e "\t--directoy\tOutput directory (default is same as input)"
	echo -e ""
	echo -e "\t--delete\tDelete input and no backup"
	echo -e "\t--keep the original\tKeep original and no backup"
	echo -e "\t--backup\tDelete the original and create backup"
	echo -e ""
	echo -e "\t-o [outputfile]\tCan be specified after each input file"
	#echo -e "\t--status \tPrint status only (supresses avconv output)" #TODO:
	#echo -e "\t--summary \tOnly print the summary" #TODO:
	#echo -e "\t--log \t[logfile]" #TODO:
	#echo -e "\t--noprompt \tTreat any prompts as errors" #TODO:
}
function timeDiff() {
	start=$1
	end=$2
	totalDiff=$(( ${end} - ${start} ))
	hourDiff=$((${totalDiff} / 3600))
	minuteDiff=$(((${totalDiff}/60%60)))
	secondDiff=$(((${totalDiff} % 60)))
	echo "$hourDiff:$minuteDiff:$secondDiff"
}
function backup() {
	input=$1
	dir=`dirname "$input"`
	file=`basename "$input"`
	if [[ "$dir" == /* ]] ; then
		dir=${dir:1}
	fi
	if [ "$dir" == "" ] ; then
		dir="."
	fi
	backDir="$BACKUP_DIR/$dir"
	mkdir -p "$backDir"
	mv "$input" "$backDir/$file"
}
function printWarning() {
	echo -e "\e[01;33m$@\e[01;37m"
}
function printError() {
	echo -e "\e[00;31m$@\e[01;37m"
}

################################################################################
# CONVERSION FUNCTIONS
function fastConvert {
	input=$1
	output=$2
	$AV_CONV_COMMAND -i "$input" $THREADS -acodec $AUDIO_CODEX -vcodec copy -f $FILE_EXTENSION "$output" 2>&1 | tee "$LOG_FILE"
}
function fullConvert {
	input=$1
	output=$2
	#TODO: specify audio codec
	$AV_CONV_COMMAND -i "$input" $THREADS -acodec $AUDIO_CODEX -vcodec $VIDEO_CODEX -f $FILE_EXTENSION "$output" | tee "$LOG_FILE"
}
#TODO: add convert_video&copy_audio and copy_video&convert_audio functions
function smartConvert {
	input=$1
	output=$2
	
	#read the video codec from the file
	videoCodec=`$AV_CONV_COMMAND -i "$input" 2>&1 | grep --only-matching -E "Video: [^ ,]+"`
	audioCodec=`$AV_CONV_COMMAND -i "$input" 2>&1 | grep --only-matching -E "Audio: [^ ,]+"`
	# Good formats:
		#Video: h264
		#Video: mpeg4
	#TODO: check audio codex
	if [[ "$videoCodec" == "Video: h264" ]] ; then
		failure=false
		
		#codec format is acceptable, use fast format
		echo "INFO: Attempting fast conversion. (copy codex)"
		fastConvert "$input" "$output"
		
		outSize=`du -b "$output" | awk '{print $1}'`
		ratioPercent=$(( 100*$outSize / $inSize ))
		
		#if fast convert failed, default to full
		if [ "$ratioPercent" -le "$VERY_SMALL_RATIO" ] ; then
			failure=true
		elif [ `du -b "$output" | awk '{print $1}'` == "0" ] ; then
			failure=true
		fi
		if [ $failure == true ] ; then
			echo "INFO: Fast converstion failed. Attempting full conversion."
			rm "$output"
			fullConvert "$input" "$output"
		fi
	else
		#unacceptable codec format, use full
		echo -e "INFO: Bad codec: \"$videoCodec\". Running full conversion."
		fullConvert "$input" "$output"
	fi
}

################################################################################
# MAIN PROGRAM
if [ $# -lt "1" ] ; then
	printHelp
	exit
fi
copy=false
smart=false
full=false
outDir=""
backup=true
keep=false
while true; do
	if [ "$1" == "--help" ] ; then
		printHelp
		exit
	elif [ "$1" == "--full" ] ; then
		full=true
		shift 1
	elif [ "$1" == "--smart" ] ; then
		smart=true
		shift 1
	elif [ "$1" == "--copy" ] ; then
		copy=true
		shift 1
	elif [[ "$1" == "-d" || "$1" == "--directory" ]] ; then
		outDir=`eval echo "$2"`/
		keep=true
		backup=false
		shift 2
	elif [ "$1" == "--delete" ] ; then # user would not like to delete
		keep=false
		backup=false
		shift 1
	elif [ "$1" == "--keep" ] ; then # user would like to delete
		keep=true
		backup=false
		shift 1
	elif [ "$1" == "--backup" ] ; then # user would like to create a backup
		backup=true
		keep=false
	else
		break
	fi
done

## set initial values
succeed=""
countSucceed=0
failed=""
countFailed=0
skipped=""
countSkipped=0
allStart=$(date +%s)

#clear log if exists
if [ -f "$LOG_FILE" ] ; then
	#TODO: archive old logs
	rm "$LOG_FILE"
fi

# begin parsing each file
while [ "$1" != "" ] ; do
	input="$1"
	output="$outDir${input%.*}.$FILE_EXTENSION" #cut file extension and add .$FILE_EXTENSION
	
	#parse arguements
	if [ "$2" != "" ] ; then
		if [ "$2" == "-o" ] ; then # user passed output file
			output="$3"
			shift 2
		fi
	fi
	shift 1 # move cursor to next file
	
	#make sure input file exists
	if [ -f "$input" ] ; then
		#make sure that files arent the same
		if [ "$input" == "$output" ] ; then
			newInput="${input%.*}.tmp.$FILE_EXTENSION"
			mv "$input" "$newInput"
			input="$newInput"
			printWarning "WARNING: Input and Output files are the same. Creating Temporary"
		
			#printError "ERROR: Input and Output files are the same!" > /dev/stderr
			#skipped=$skipped"IN_OUT_SAME: $input\n"
			#countSkipped=$(($countSkipped+1))
			##skip this file
			#continue
		fi
		
		if [ -f "$output" ] ; then
			#ask if overwriting
			echo -en "WARNING: \"$output\" already exists. \nOVER WRITE [y/N]? "
			overWrite=""
			read overWrite
			if [ "$overWrite" != "y" ] ; then
				#skip this file
				skipped=$skipped"NO_OVERRIGHT: $input\n"
				countSkipped=$(($countSkipped+1))
				continue
			fi
			#TODO: should make backup of file being overwritten
		fi
	
		#start conversion
		start=$(date +%s)
		inSize=`du -b "$input" | awk '{print $1}'`
		
		dirName=`dirname "$output"`
		mkdir -p "$dirName" 
		touch "$output"
		if [ -f "$output" ] ; then
			rm "$output"
			echo "Ripping: \"$input\" to \"$output\""
			
			if [ $full == true ] ; then
				fullConvert "$input" "$output"
			elif [ $copy == true ] ; then
				fastConvert "$input" "$output"
			else
				smartConvert "$input" "$output"
			fi
		else
			printError "ERROR: Could not create output file: \"$output\"" > /dev/stderr
			failed=$failed"NO_OUTPUT: $input\n"
			countFailed=$(($countFailed+1))
			continue
		fi
		
		#was the output file created
		if [ -f "$output" ] ; then
			end=$(date +%s)
			outSize=`du -b "$output" | awk '{print $1}'`
			ratioPercent=$(( 100*$outSize / $inSize ))
		
			#was there data in the output file
			if [ "$outSize" == "0" ] ; then
				printError "ERROR: conversion failed. \"$output\" is empty." > /dev/stderr
				failed=$failed"EMPTY_OUTPUT: $input\n"
				countFailed=$(($countFailed+1))
				rm "$output"
				continue
			elif [ "$ratioPercent" -le "$VERY_SMALL_RATIO" ] ; then
				printError "ERROR: conversion failed. \"$output\" is very small." > /dev/stderr
				failed=$failed"TINY_OUTPUT: $input\n"
				countFailed=$(($countFailed+1))
				rm "$output"
				continue
			else
				#file looks good, call it a success
				Diff=`timeDiff $start $end`
				echo -e "Completed \"$input\" to \"$output\"\n\tTime: $Diff\tRatio: $ratioPercent%"
				succeed=$succeed"DONE: $output\n\tTime: $Diff\tRatio: $ratioPercent%\n"
				countSucceed=$(($countSucceed+1))
				
				if [ $backup == true ] ; then
					backup "$input"
				fi
				if [ $keep == false ] ; then
					rm "$input"
				fi
			fi
			
			#add warnings about file sizes
			#if [ "$ratioPercent" -gt "$LARGE_RATIO" ] ; then
			if [ "$outSize" -gt "$inSize" ] ; then
				#the file got bigger
				warnMessage="WARNING: Output larger than input.\tRatio: $ratioPercent%"
				printWarning $warnMessage > /dev/stderr
				succeed=$succeed`printWarning $warnMessage`"\n"
				printWarning "\tWas: ${inSize} bytes\tIs: ${outSize} bytes\tDiff: "$(($outSize-$inSize))" bytes" > /dev/stderr
			elif [ "$ratioPercent" -le "$SMALL_RATIO" ] ; then
				#output file is small in comparison
				warnMessage="WARNING: Small output file.\tRatio: $ratioPercent%\tSize: "`du -h "$output" | awk '{print $1}'`
				printWarning $warnMessage > /dev/stderr
				succeed=$succeed"\t"`printWarning $warnMessage`"\n"
			fi
		else
			printError "ERROR: conversion failed. \"$output\" does not exist." > /dev/stderr
			failed=$failed"NO_OUTPUT: $input\n"
			countFailed=$(($countFailed+1))
			continue
		fi
	else
		printError "ERROR: Input file \"$input\" does not exist" > /dev/stderr
		skipped=$skipped"NO_INPUT: $input\n"
		countSkipped=$(($countSkipped+1))
	fi
	echo ""
done

#print results
#TODO: add total sizes and space saved
AllDiff=`timeDiff $allStart $end`
totalFiles=$(($countSucceed+$countFailed+$countSkipped))
echo -e "\nDone with all conversions\n"
if [ "$succeed" != "" ] ; then
	echo "Files succeeded: $countSucceed"
	echo -e "$succeed"
fi
if [ "$failed" != "" ] ; then
	echo "Files failed: $countFailed"
	printError "$failed"
fi
if [ "$skipped" != "" ] ; then
	echo "Files skipped: $countSkipped"
	printWarning "$skipped"
fi
echo -e "Conversions completed. Time: $AllDiff"
echo -e "Total Files: $totalFiles\tSucceeded: $countSucceed\tFailed: $countFailed\tSkipped: $countSkipped"
